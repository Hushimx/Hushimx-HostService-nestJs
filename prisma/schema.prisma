// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Country {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  name_ar   String?
  code      String   @unique           // Country code (e.g., "US" for the United States)
  currency  String   @unique           // Currency code (e.g., "USD" for the United States)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Admins      Admin[]  
  cities     City[]

  @@map("countries")
  Client Client[]
}

model City {
  id         Int      @id @default(autoincrement())
  name       String
  name_ar   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  countryId  Int
  country    Country @relation(fields: [countryId], references: [id])
  hotels     Hotel[]
  vendors    Vendor[]
  Store Store[]
  orders     DeliveryOrder[]
  Driver Driver[] 

  @@unique([name, countryId])           // Ensures city names are unique within each country
  @@map("cities")
  CityServiceVendor CityServiceVendor[]
  ServiceOrder ServiceOrder[]
  Events Event[]
}

model Admin {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email     String    @unique
  password      String
  name String
  countryId Int
  country   Country   @relation(fields: [countryId], references: [id])

  role      Role      @default(REGIONAL_ADMIN)

  bookmarks Bookmark[]

  @@map("admins")
}
model Client {
  id        Int       @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  name      String?
  phoneNo   String    @unique
  countryCode String
  Order DeliveryOrder[]
  ServiceOrder ServiceOrder[]
  
  country   Country   @relation(fields: [countryCode], references: [code])
  @@map("clients")
}
model Bookmark {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  title      String
  description String?
  link       String

  AdminId     Int
  Admin       Admin      @relation(fields: [AdminId], references: [id])

  @@map("bookmarks")
}

model Event {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  title String
  title_ar String?
  
  description String?
  description_ar String?

  address String
  locationUrl String?
  image String?
  cityId Int




  city       City      @relation(fields: [cityId], references: [id])




}


model Hotel {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name      String
  address String
  locationUrl  String?

  cityId    Int

  city      City      @relation(fields: [cityId], references: [id],onDelete: Cascade)
  rooms     Room[]

  @@map("hotels")
  ServiceOrder ServiceOrder[]
}

model Room {
  id        Int      @id @default(autoincrement())
  uuid      String   @default(uuid()) @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roomNumber String
  type       String
  hotelId    Int

  hotel      Hotel    @relation(fields: [hotelId], references: [id],onDelete: Cascade)

  @@map("rooms")
  @@unique([roomNumber, hotelId])  
  Order DeliveryOrder[]
  ServiceOrder ServiceOrder[]
}



model Service {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  name        String
  slug        String @unique
  description String?
  serviceOrders ServiceOrder[]

  @@map("services")
  CityServiceVendor CityServiceVendor[]
}
model CityServiceVendor {
  id        Int      @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  address String?
  locationUrl  String?
  description  String?
  description_ar  String? 
  serviceId Int
  vendorId  Int?
  cityId    Int


  service   Service  @relation(fields: [serviceId], references: [id],onDelete: Cascade)
  vendor    Vendor?   @relation(fields: [vendorId], references: [id],onDelete: SetDefault)
  city      City     @relation(fields: [cityId], references: [id],onDelete: Cascade)

  @@unique([serviceId, cityId])  // Ensures each service has only one vendor per city
  @@map("city_service_vendors")
}
model ServiceOrder {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  uuid        String    @default(uuid()) @unique
  clientId      Int?
  serviceId   Int?
  vendorId    Int?
  cityId     Int?   
  hotelId    Int?      
  roomId     Int?          // Foreign key to the Room
  driverId   Int?
  
  serviceName   String
  vendorName  String
  clientName  String?
  clientNumber String
  roomNumber   String
  hotelName  String

  currencySign String

  driverAccessCode String @default(uuid()) @unique

  notes       String?
  status      ServiceOrderStatus 
  total       Float     @default(0)

  
  vendor      Vendor?    @relation(fields: [vendorId], references: [id] ,onDelete: SetNull)
  client      Client?    @relation(fields: [clientId], references: [id],onDelete: SetNull)
  service     Service?   @relation(fields: [serviceId], references: [id],onDelete: SetNull)
  hotel       Hotel?      @relation(fields: [hotelId], references: [id],onDelete: SetNull)
  room       Room?         @relation(fields: [roomId], references: [id],onDelete: SetNull)
  city       City?         @relation(fields: [cityId], references: [id],onDelete: SetNull)
  driver     Driver?       @relation(fields: [driverId], references: [id],onDelete: SetNull)

  @@map("service_orders")
  Message Message[]
}

enum ServiceOrderStatus {
  PENDING
  PICKUP
  IN_PROGRESS
  COMPLETED
  CANCELED
}

model Vendor {
  id        Int       @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email     String   @unique
  password  String
  
  name      String
  phoneNo   String
  address   String
  cityId    Int

  locationUrl  String?

  city      City      @relation(fields: [cityId], references: [id], onDelete: Cascade)

  ServiceOrder ServiceOrder[]
  CityServiceVendor CityServiceVendor[]
  @@map("vendors")
  Store Store[]
  DeliveryOrder DeliveryOrder[]
}

model Driver {
  id        Int       @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name      String
  phoneNo   String
  cityId    Int

  city      City      @relation(fields: [cityId], references: [id], onDelete: Cascade)

  @@map("drivers")
  orders  DeliveryOrder[]
  ServiceOrder ServiceOrder[]
}
model Store {
  id        Int       @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  uuid      String   @default(uuid()) @unique

  name      String  

  image  String?
  banner String?

  description String?
  sectionId      Int?

  vendorId  Int
  cityId    Int

  products  Product[] // Relation to products

  ProductsCategory ProductsCategory[]
  Order DeliveryOrder[]
  vendor    Vendor    @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  city      City      @relation(fields: [cityId], references: [id], onDelete: Cascade)
  section      StoreSection?      @relation(fields: [sectionId], references: [id], onDelete: SetNull)
  @@map("stores")
}

model Product {
  id        Int       @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  price     Float
  categoryId Int?
  image      String?
  aproved    Boolean @default(false)
  
  storeId   Int       // Foreign key for Store relation

  store     Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  categories    ProductsCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull) // Optional relationship

  orderItems DeliveryOrderItem[]  // Relation to order items

  @@map("products")
}

model Message {
  id        Int      @id @default(autoincrement())
  to        String
  content   String
  type      String
  deliveryOrderId Int?
  ServiceOrderId Int?

deliveryOrder DeliveryOrder? @relation(fields: [deliveryOrderId], references: [id])
  serviceOrder ServiceOrder? @relation(fields: [ServiceOrderId], references: [id])
  status    MessageStatus   @default(PENDING) // PENDING, SENT, FAILED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductsCategory {
  id         Int         @id @default(autoincrement())
  name       String
  storeId    Int         // Foreign key for Store relation
  store      Store       @relation(fields: [storeId], references: [id], onDelete: Cascade)
  Products Product[]

  @@unique([name, storeId]) // Ensures category names are unique per store
  @@map("Products_Category")
}

// New Order and OrderItem models

model DeliveryOrder {
  id         Int          @id @default(autoincrement())
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  clientId   Int?          // Foreign key to the Client
  cityId     Int?          // Foreign key to the City where the order was placed
  roomId     Int?          // Foreign key to the Room
  hotelId    Int?
  vendorId   Int?
  driverId   Int?


  storeId Int
  storeName String
  
  currencySign String

  clientName String
  clientNumber String
  roomNumber   String
  hotelName  String
  

  store       Store         @relation(fields: [storeId], references: [id])
  room       Room?         @relation(fields: [roomId], references: [id],onDelete: SetNull)
  city       City?         @relation(fields: [cityId], references: [id],onDelete: SetNull)
  client     Client?       @relation(fields: [clientId], references: [id],onDelete: SetNull)  
  Vendor     Vendor?       @relation(fields: [vendorId], references: [id],onDelete: SetNull)  
  driver     Driver?       @relation(fields: [driverId], references: [id],onDelete: SetNull)

  
  paymentMethod String

  notes       String?

  driverAccessCode String @default(uuid()) @unique
  
  status     DeliveryOrderStatus  // Tracks the current status of the order
  total      Float        @default(0.0) // Calculated total for the order

  orderItems DeliveryOrderItem[]  // Relation to order items

  @@map("delivery_orders")
  Message Message[]
}

model DeliveryOrderItem {
  id         Int          @id @default(autoincrement())
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  orderId    Int          // Foreign key to associate with the Order
  productId  Int          // Foreign key to the Product
  productTitle String


  quantity   Int          // Quantity of this product in the order
  price      Float        // Price at the time of ordering (for record-keeping)

  order      DeliveryOrder        @relation(fields: [orderId], references: [id])
  product    Product      @relation(fields: [productId], references: [id])

  @@map("delivery_order_items")
}
model StoreSection {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  name        String     
  name_ar     String?
  
  @@map("store_sections")
  Store Store[]
} 
model PaymentMethod {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  name        String     @unique
  displayName String
  type        PaymentMethodType
  isActive    Boolean    @default(true)
  config      Json?

  @@map("PaymentMethod")
}


//Enums

enum Role {
  REGIONAL_ADMIN
  SUPER_ADMIN
}

enum DeliveryOrderStatus {
  PENDING   
  PICKUP
  ON_WAY      
  COMPLETED  
  CANCELED    
}
enum MessageStatus {
  PENDING
  SENT
  FAILED
  }
enum PaymentMethodType {
  offline
  online
}
enum StoreTypes {
  resturant
  pharmacy
  gracery
}